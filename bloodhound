//グラフ理論を使用し、AD環境内の関係性をあぶりだせる

//インストール
sudo apt install bloodhound
sudo neo4j console
ブラウザでhttp://localhost:7474にアクセス
ユーザ名neo4j、初期パスneo4jでログイン
ターミナルでbloodhoundコマンドで起動

//sharphoundの配送
/usr/share/bloodhound/resources/app/Collectors/SharpHound.exe
/usr/share/matasploit-framework/data/post/SharpHound.exe
uploads SharpHound.exe C:\Windows\system32 #meterpreterでシェルを張ってればこれで配送できる

//sharphoundを配送せずに実行する
bloodhound-python -u <user> -p '<pass>' -d <domain> -c All -dc dc01.example.local

//シェルを取れなくてもldap経由でbloodhoundを動かす
netexec ldap <domain> -u <user> -p <pass> --bloodhound --collection All --dns-server <IP>

//コンソール画面の操作
CTRL キーを押すと、3 つの異なるノード ラベル表示設定 (デフォルト、常に表示、常に非表示) が切り替わります。
Spacebar を押すと、スポットライト ウィンドウが表示され、現在描画されているすべてのノードが一覧表示されます。リスト内の項目をクリックすると、GUI がそのノードにズームインし、一時的に強調表示されます。
Backspace	キーを押すと、前のグラフ結果のレンダリングに戻ります。これは、検索バーの [戻る] ボタンをクリックするのと同じ機能です。
S	を押すと、検索バーの下の情報パネルの展開と折りたたみが切り替わります。これは、検索バーの [詳細情報] ボタンをクリックするのと同じ機能です。

//neo4jのクエリ（bloodhoundでも使えるよ）
MATCH (u:User) RETURN u　#すべてのユーザを表示
MATCH (u:User {name:"<user>@<domain>"}) RETURN u #特定のユーザを表示
MATCH (u:User {name:"<user>@<domain>"})-[r:MemberOf]->(<変数名>) RETURN <変数名> #指定したユーザのグループを変数を用いて表示
MATCH (n:User {name:"<user>@<domain>"})-[r:MemberOf]->(g:Group) RETURN n,r,g #指定したユーザのmember ofを表示
MATCH p = shortestPath((n)-[*1..]->(c))  WHERE n.name =~ '(?i)<user>.*' AND NOT c=n  RETURN p　#特定のユーザから任意のノードへの最短パス
MATCH p = allshortestPaths((n)-[*1..]->(c))  WHERE n.name =~ '(?i)<user>.*' AND NOT c=n  RETURN p　#特定のユーザからすべての関係の表示
MATCH (u:User) WHERE u.description IS NOT NULL RETURN u.name,u.description　#説明欄が空白でないユーザ
MATCH (c:Computer) OPTIONAL MATCH (u1:User)-[:AdminTo]->(c) OPTIONAL MATCH (u2:User)-[:MemberOf*1..]->(:Group)-[:AdminTo]->(c) WITH COLLECT(u1) + COLLECT(u2) AS TempVar,c UNWIND TempVar AS Admins RETURN c.name AS COMPUTER, COUNT(DISTINCT(Admins)) AS ADMIN_COUNT,COLLECT(DISTINCT(Admins.name)) AS USERS ORDER BY ADMIN_COUNT DESC　#すべてのローカル管理者と、管理者が所属するホスト
